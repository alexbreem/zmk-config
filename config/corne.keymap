/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        tp: tap_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_PREFERRED";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    macros {
        given: given {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp ENTER &kp UP_ARROW &kp FSLH &kp FSLH &kp SPACE &kp G &kp I &kp V &kp E &kp N>;
            label = "GIVEN";
        };

        when: when {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp ENTER &kp UP_ARROW &kp FSLH &kp FSLH &kp SPACE &kp W &kp H &kp E &kp N>;
            label = "WHEN";
        };

        then: then {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp ENTER &kp UP_ARROW &kp FSLH &kp FSLH &kp SPACE &kp T &kp H &kp E &kp N>;
            label = "THEN";
        };

        assertEquals: assertEquals {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp A &kp S &kp S &kp E &kp R &kp T &kp LS(E) &kp Q &kp U &kp A &kp L &kp S &kp LPAR &kp RPAR &kp SEMI &kp LEFT_ARROW &kp LEFT_ARROW>;
            label = "ASSERTEQUALS";
        };

        assertThat: assertThat {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp A &kp S &kp S &kp E &kp R &kp T &kp LS(T) &kp H &kp A &kp T &kp LPAR &kp RPAR &kp SEMI &kp LEFT &kp LEFT>;
            label = "ASSERTTHAT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // | TAB  |  Q  |  W  |  E  |  R  |    T    |   |  Y  |  U   |  I  |  O  |  P  | ESC |
            // | CTRL |  A  |  S  |  D  |  F  |    G    |   |  H  |  J   |  K  |  L  |  ;  |  LWR/'   |
            // | SHFT |  Z  |  X  |  C  |  V  |    B    |   |  N  |  M   |  ,  |  .  |  /  | SHFT |
            //                    | GUI | LWR | ALT/ENT |   | HYPER/SPC | BKSP  | RSE |

            bindings = <
&kp ESCAPE  &kp Q           &kp W  &kp E     &kp R            &kp T              &kp Y      &kp U             &kp I          &kp O    &kp P              &lt 3 LEFT_BRACKET
&kp TAB     &tp LEFT_ALT A  &kp S  &kp D     &lt 1 F          &kp G              &kp H      &kp J             &kp K          &kp L    &tp LEFT_ALT SEMI  &kp SQT
&kp LSHFT   &kp Z           &kp X  &kp C     &kp V            &kp B              &kp N      &kp M             &kp COMMA      &kp DOT  &kp FSLH           &kp RSHFT
                                   &kp LGUI  &lt 2 BACKSLASH  &tp LCTRL SPACE    &kp ENTER  &kp LEFT_CONTROL  &kp BACKSPACE
            >;
        };

        layer_3 {
            bindings = <
&kp LC(LS(T))  &kp LC(LA(N7))  &kp LA(INSERT)  &kp LEFT_SHIFT  &kp PRINTSCREEN  &trans    &given  &assertEquals   &kp UP_ARROW    &kp LG(SPACE)    &kp LA(LS(NUMBER_1))  &kp RIGHT_BRACKET
&kp LC(LS(O))  &kp LA(LC(L))   &kp LCTRL       &kp LS(LCTRL)   &trans           &trans    &when   &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp HOME              &kp PAGE_UP
&trans         &kp CAPSLOCK    &trans          &trans          &trans           &trans    &then   &assertThat     &kp LC(LS(I))   &kp DELETE       &kp END               &kp PAGE_DOWN
                                               &trans          &trans           &trans    &trans  &trans          &trans
            >;
        };

        layer_below {
            // -----------------------------------------------------------------------------------------
            // |      |  !  |  @  |  #  |  $  |    %     |   |  ^  |  &  |  *  |  (  |  )  |   \   |
            // |      |  1  |  2  |  3  |  4  |    5     |   |  -  |  =  |  `  |  [  |  ]  |  "|"  |
            // | SHFT |  6  |  7  |  8  |  9  |    0     |   |  _  |  +  |  ~  |  {  |  }  | RSHFT |
            //                     | GUI |     | ALT/ENT |   | HYPER/SPACE | BKSP |    |

            bindings = <
&kp GRAVE  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT       &kp CARET     &kp AMPS       &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &kp EQUAL
&trans     &kp N1    &kp N2  &kp N3    &kp N4    &kp N5          &kp NUMBER_6  &kp N7         &kp N8           &kp N9    &kp N0    &kp MINUS
&trans     &kp F1    &kp F2  &kp F3    &kp F4    &kp F5          &kp F6        &kp F7         &kp F8           &kp F9    &kp F10   &trans
                             &trans    &trans    &tp LALT RET    &kp LCTRL     &kp LS(LCTRL)  &kp LA(LCTRL)
            >;
        };

        layer_above {
            // -----------------------------------------------------------------------------------------
            // |       |  F1  |  F2  |  F3  |  F4  |  F5 |            |  F6  |  F7  |  F8  |  F9  |  F10  |   |
            // |       | Prev | Next | Vol - | Vol + | Play/Pause |   |      | LFT | DWN |  UP | RGT |     |     |
            // | BTCLR | BT1 | BT2 | BT3 | BT4 | BT5 |   |            |     |     |     |     |     |     |
            //                    |     |     |    |                  |     |     |     |

            bindings = <
&bt BT_CLR  &kp F1        &kp F2        &kp F3        &kp F4        &kp F5          &kp F6    &kp F7    &kp F8  &kp F11    &kp F12  &trans
&trans      &kp C_PREV    &kp C_NEXT    &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PP        &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans   &trans
&trans      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans    &trans    &trans  &trans     &trans   &trans
                                        &trans        &trans        &trans          &trans    &trans    &trans
            >;
        };
    };
};
